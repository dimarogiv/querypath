{%- let section = "# =============================================================================\n#" -%}
{%- let not_configured = "# -- not configured --" -%}

# shellcheck shell=bash

{{ section }}
# When using querypath with --no-cmd, alias these internal functions as desired.
#

__querypath_z_prefix='z#'

# Jump to a directory using only keywords.
function __querypath_z() {
  if ! (echo $@ | grep '^./\|^/\|^~' -q) && ([[ $# -gt 1 ]] || ([[ $# -eq 1 ]] && ! [[ -e ${@[$#]} ]]))
  then
    result="$(\command zoxide query -- $@)"
  elif [[ $# -eq 1 ]]
  then
    result="$1"
  fi
  [[ -z "$result" ]] && echo "Error: result is not assigned!" >&2 && exit 1
  echo "$result"
  \command zoxide add -- "$result"
}

# Jump to a directory using interactive search.
function __querypath_zi() {
    \builtin local result
    result="$(\command querypath query --interactive -- "$@")" && echo "${result}"
}

{{ section }}
# Commands for querypath. Disable these using --no-cmd.
#

{%- match cmd %}
{%- when Some with (cmd) %}

\builtin unalias {{cmd}} &>/dev/null || \builtin true
function {{cmd}}() {
    __querypath_z "$@"
}

\builtin unalias {{cmd}}i &>/dev/null || \builtin true
function {{cmd}}i() {
    __querypath_zi "$@"
}

# Load completions.
# - Bash 4.4+ is required to use `@Q`.
# - Completions require line editing. Since Bash supports only two modes of
#   line editing (`vim` and `emacs`), we check if either them is enabled.
# - Completions don't work on `dumb` terminals.
if [[ ${BASH_VERSINFO[0]:-0} -eq 4 && ${BASH_VERSINFO[1]:-0} -ge 4 || ${BASH_VERSINFO[0]:-0} -ge 5 ]] &&
    [[ :"${SHELLOPTS}": =~ :(vi|emacs): && ${TERM} != 'dumb' ]]; then

    function __querypath_z_complete_helper() {
        READLINE_LINE="{{ cmd }} ${__querypath_result@Q}"
        READLINE_POINT={{ "${#READLINE_LINE}" }}
        bind '"\e[0n": accept-line'
        \builtin printf '\e[5n' >/dev/tty
    }

    function __querypath_z_complete() {
        # Only show completions when the cursor is at the end of the line.
        [[ {{ "${#COMP_WORDS[@]}" }} -eq $((COMP_CWORD + 1)) ]] || return

        # If there is only one argument, use `cd` completions.
        if [[ {{ "${#COMP_WORDS[@]}" }} -eq 2 ]]; then
            \builtin mapfile -t COMPREPLY < <(
                \builtin compgen -A directory -- "${COMP_WORDS[-1]}" || \builtin true
            )
        # If there is a space after the last word, use interactive selection.
        elif [[ -z ${COMP_WORDS[-1]} ]]; then
            # shellcheck disable=SC2312
            __querypath_result="$(\command querypath query --interactive -- "{{ "${COMP_WORDS[@]:1:${#COMP_WORDS[@]}-2}" }}")" && {
                # In case the terminal does not respond to \e[5n or another
                # mechanism steals the response, it is still worth completing
                # the directory in the command line.
                COMPREPLY=("${__querypath_z_prefix}${__querypath_result}/")

                # Note: We here call "bind" without prefixing "\builtin" to be
                # compatible with frameworks like ble.sh, which emulates Bash's
                # builtin "bind".
                bind -x '"\e[0n": __querypath_z_complete_helper'
                \builtin printf '\e[5n' >/dev/tty
            }
        fi
    }

    \builtin complete -F __querypath_z_complete -o filenames -- {{cmd}}
    \builtin complete -r {{cmd}}i &>/dev/null || \builtin true
fi

{%- when None %}

{{ not_configured }}

{%- endmatch %}

{{ section }}
# To initialize querypath, add this to your shell configuration file (usually ~/.bashrc):
#
# eval "$(querypath init bash)"
